"""
Django Integration Example
Shows how to integrate Telegram notifications into a Django application.
"""

# settings.py additions
TELEGRAM_BOT_TOKEN = "your_bot_token_here"
TELEGRAM_CHAT_IDS = ["your_chat_id_here"]

# Install the notifier package:
# pip install /path/to/telegram-bot

# utils/notifications.py
from django.conf import settings
from telegram_notifier import send_notification_sync, TelegramNotifier
import logging

logger = logging.getLogger(__name__)

# Global notifier instance
notifier = TelegramNotifier(
    bot_token=getattr(settings, 'TELEGRAM_BOT_TOKEN', None),
    default_chat_ids=getattr(settings, 'TELEGRAM_CHAT_IDS', [])
)

def notify_admin(message: str, level: str = "INFO") -> bool:
    """Send notification to admin chats."""
    if not hasattr(settings, 'TELEGRAM_BOT_TOKEN'):
        logger.warning("Telegram not configured, skipping notification")
        return False
    
    formatted_message = f"ðŸ”” **Django App**\\n\\n[{level}] {message}"
    return send_notification_sync(formatted_message)

def notify_error(message: str, exception: Exception = None) -> bool:
    """Send error notification with context."""
    error_msg = f"ðŸš¨ **Django Error**\\n\\n{message}"
    if exception:
        error_msg += f"\\n\\n**Exception:** `{str(exception)}`"
    
    return send_notification_sync(error_msg)

def notify_user_action(user, action: str, details: str = "") -> bool:
    """Notify about user actions."""
    message = f"""
ðŸ‘¤ **User Action**

**User:** {user.email}
**Action:** {action}
**Details:** {details}
**Time:** {timezone.now()}
"""
    return send_notification_sync(message)

# middleware.py
from django.utils.deprecation import MiddlewareMixin
from .utils.notifications import notify_error

class TelegramErrorMiddleware(MiddlewareMixin):
    """Middleware to send Telegram notifications for 500 errors."""
    
    def process_exception(self, request, exception):
        # Send notification for server errors
        error_message = f"""
ðŸš¨ **Django 500 Error**

**URL:** {request.get_full_path()}
**Method:** {request.method}
**User:** {getattr(request.user, 'email', 'Anonymous')}
**Error:** {str(exception)}
**User Agent:** {request.META.get('HTTP_USER_AGENT', 'Unknown')}
"""
        notify_error(error_message, exception)
        return None

# views.py
from django.shortcuts import render, redirect
from django.contrib.auth import login
from django.contrib import messages
from .utils.notifications import notify_admin, notify_user_action

def user_registration_view(request):
    if request.method == 'POST':
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            
            # Send notification
            notify_user_action(
                user, 
                "Registration", 
                f"New user from {request.META.get('REMOTE_ADDR')}"
            )
            
            login(request, user)
            messages.success(request, 'Registration successful!')
            return redirect('dashboard')
    else:
        form = UserRegistrationForm()
    
    return render(request, 'registration.html', {'form': form})

def payment_success_view(request, payment_id):
    payment = get_object_or_404(Payment, id=payment_id)
    
    # Send payment notification
    notify_admin(f"ðŸ’° Payment received: ${payment.amount} from {payment.user.email}")
    
    return render(request, 'payment_success.html', {'payment': payment})

# management/commands/send_daily_report.py
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from telegram_notifier import send_notification_sync
from django.utils import timezone
from datetime import timedelta

class Command(BaseCommand):
    help = 'Send daily report via Telegram'

    def handle(self, *args, **options):
        today = timezone.now().date()
        yesterday = today - timedelta(days=1)
        
        # Gather statistics
        new_users = User.objects.filter(date_joined__date=yesterday).count()
        total_users = User.objects.count()
        
        report = f"""
ðŸ“Š **Daily Report - {yesterday.strftime('%B %d, %Y')}**

**Users:**
â€¢ New registrations: {new_users}
â€¢ Total users: {total_users}

**System:**
â€¢ Report generated: {timezone.now().strftime('%Y-%m-%d %H:%M:%S')}

Generated by Django management command
"""
        
        success = send_notification_sync(report)
        
        if success:
            self.stdout.write(
                self.style.SUCCESS('Daily report sent successfully')
            )
        else:
            self.stdout.write(
                self.style.ERROR('Failed to send daily report')
            )

# Add to MIDDLEWARE in settings.py:
# MIDDLEWARE = [
#     ...
#     'your_app.middleware.TelegramErrorMiddleware',
#     ...
# ]

# Add to INSTALLED_APPS if you want the management command:
# Run with: python manage.py send_daily_report

# You can also set up a cron job:
# 0 9 * * * cd /path/to/your/django/project && python manage.py send_daily_report
